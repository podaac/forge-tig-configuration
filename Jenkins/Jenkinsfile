pipeline {
    agent none
    options {
        preserveStashes(buildCount: 5)
    }
    environment{
        ARTIFACTORY_DOCKER_REGISTRY = "cae-artifactory.jpl.nasa.gov:16003"
    }
    stages{
        stage("Checkout"){
            agent {
                label "devops1"
            }
            steps{
                checkout([
                    $class: 'GitSCM',
                    branches: scm.branches,
                    extensions: scm.extensions + [
                        [$class: 'CleanBeforeCheckout'],
                        [$class: 'WipeWorkspace'],
                        [$class: 'LocalBranch', localBranch: '**'],
                        [$class: 'PruneStaleBranch']
                    ],
                    userRemoteConfigs: scm.userRemoteConfigs
                ])
                script{
                    the_env = sh(returnStdout: true, script: "printenv").trim()
                }
                writeYaml file: 'build-info.yaml', data: ['build_environment': the_env ], overwrite: true
                stash name: 'build-info', includes: 'build-info.yaml'
            }
        }
        stage("Run Build"){
            agent {
                label 'devops1'
            }
            stages{
                stage("Version"){
                    stages {
                        stage("Pre Alpha"){
                            when {
                                anyOf{
                                    branch 'feature/*'
                                    changeRequest target: 'develop'
                                }
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    build_info.deploy_env = "sit"
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Alpha"){
                            when {
                                branch 'develop'
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    build_info.deploy_env = "sit"
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Release Candidate"){
                            when {
                                changeRequest target: 'master'
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    build_info.deploy_env = "uat"
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                        stage("Release"){
                            when {
                                branch 'master'
                            }
                            steps{
                                unstash name: 'build-info'
                                script{
                                    build_info = readYaml file: 'build-info.yaml'
                                    build_info.deploy_env = "ops"
                                }
                                writeYaml file: 'build-info.yaml', data: build_info, overwrite: true
                                stash name: 'build-info', includes: 'build-info.yaml'
                            }
                        }
                    }
                }
            }
        }
        stage("Deploy"){
            when {
                anyOf{
                    branch 'develop'
                    branch 'master'
                    changeRequest target: 'master'
                    changelog '^/jenkins deploy'
                }
            }
            agent {
                docker {
                    image "${env.ARTIFACTORY_DOCKER_REGISTRY}/podaac/service/deploy-terraform-0.12.31"
                    label 'devops1'
                    alwaysPull true
                    args '-v /home/cm/.aws:/home/dockeruser/.aws:ro'
                }
            }
            environment {
                GIT_COMMIT_SHORT = sh(script: "printf \$(git rev-parse --short ${GIT_COMMIT})", returnStdout: true).trim()
            }
            steps{
                unstash name: 'build-info'
                script{
                    build_info = readYaml file: 'build-info.yaml'
                }
                echo "Publishing Configurations to ${build_info.deploy_env} S3"
                dir('terraform'){
                    sh "terraform init -reconfigure -input=false -backend-config=bucket=podaac-services-${build_info.deploy_env}-terraform -backend-config=profile=ngap-service-${build_info.deploy_env}"
                    sh "terraform output hitide-bucket-name"
                    script{
                        bucket_name = sh(returnStdout: true, script: "terraform output hitide-bucket-name").trim()
                    }
                }
                sh("aws s3 sync ./config-files s3://${bucket_name}/dataset-configs --delete --profile ngap-service-${build_info.deploy_env} --metadata githash=${GIT_COMMIT_SHORT} --size-only")
                sh("aws s3 sync ./palettes s3://${bucket_name}/palettes --delete --profile ngap-service-${build_info.deploy_env} --metadata githash=${GIT_COMMIT_SHORT} --size-only")
            }
        }
    }
}